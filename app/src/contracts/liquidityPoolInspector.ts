import { ethers } from "ethers";
import { V3LiquidityPool } from "../types";

const CONTRACT_ABI = `[{"inputs":[{"internalType":"address[]","name":"pools","type":"address[]"}],"name":"inspect","outputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"}],"internalType":"struct LiquidityPoolInspector.InspectionResult[]","name":"inspectionResults","type":"tuple[]"}],"stateMutability":"view","type":"function"}]`;
const STATE_OVERRIDE_BYTECODE = `0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063573a3f2914610030575b600080fd5b61004a600480360381019061004591906104aa565b610060565b60405161005791906105f3565b60405180910390f35b6060815167ffffffffffffffff81111561007d5761007c610309565b5b6040519080825280602002602001820160405280156100b657816020015b6100a361027c565b81526020019060019003908161009b5790505b50905060005b82518110156101b95760405180606001604052808483815181106100e3576100e2610615565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168152602001610131630dfe168160e01b86858151811061012457610123610615565b5b60200260200101516101bf565b73ffffffffffffffffffffffffffffffffffffffff16815260200161017763d21220a760e01b86858151811061016a57610169610615565b5b60200260200101516101bf565b73ffffffffffffffffffffffffffffffffffffffff168152508282815181106101a3576101a2610615565b5b60200260200101819052508060010190506100bc565b50919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff16856040516020016101ec9190610691565b604051602081830303815290604052604051610208919061071d565b600060405180830381855afa9150503d8060008114610243576040519150601f19603f3d011682016040523d82523d6000602084013e610248565b606091505b50915091508161025d57600092505050610276565b808060200190518101906102719190610772565b925050505b92915050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610341826102f8565b810181811067ffffffffffffffff821117156103605761035f610309565b5b80604052505050565b60006103736102df565b905061037f8282610338565b919050565b600067ffffffffffffffff82111561039f5761039e610309565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103e0826103b5565b9050919050565b6103f0816103d5565b81146103fb57600080fd5b50565b60008135905061040d816103e7565b92915050565b600061042661042184610384565b610369565b90508083825260208201905060208402830185811115610449576104486103b0565b5b835b81811015610472578061045e88826103fe565b84526020840193505060208101905061044b565b5050509392505050565b600082601f830112610491576104906102f3565b5b81356104a1848260208601610413565b91505092915050565b6000602082840312156104c0576104bf6102e9565b5b600082013567ffffffffffffffff8111156104de576104dd6102ee565b5b6104ea8482850161047c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610528816103d5565b82525050565b606082016000820151610544600085018261051f565b506020820151610557602085018261051f565b50604082015161056a604085018261051f565b50505050565b600061057c838361052e565b60608301905092915050565b6000602082019050919050565b60006105a0826104f3565b6105aa81856104fe565b93506105b58361050f565b8060005b838110156105e65781516105cd8882610570565b97506105d883610588565b9250506001810190506105b9565b5085935050505092915050565b6000602082019050818103600083015261060d8184610595565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b61068b61068682610644565b610670565b82525050565b600061069d828461067a565b60048201915081905092915050565b600081519050919050565b600081905092915050565b60005b838110156106e05780820151818401526020810190506106c5565b60008484015250505050565b60006106f7826106ac565b61070181856106b7565b93506107118185602086016106c2565b80840191505092915050565b600061072982846106ec565b915081905092915050565b600061073f826103b5565b9050919050565b61074f81610734565b811461075a57600080fd5b50565b60008151905061076c81610746565b92915050565b600060208284031215610788576107876102e9565b5b60006107968482850161075d565b9150509291505056fea26469706673582212203e38494723e4198fb5856f4a2818421a8f6653e7f6322bc27feaafd75d73fa9664736f6c634300081b0033`;
const STATE_OVERRIDE_ADDRESS = `0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97`;

export async function getLiquidityPools(
    provider: ethers.JsonRpcProvider, 
    pools: string[]
) : Promise<V3LiquidityPool[]> {
    const override: Map<string, any> = new Map();

    override.set(STATE_OVERRIDE_ADDRESS, {
        code: STATE_OVERRIDE_BYTECODE
    });

    const contract = new ethers.Contract(STATE_OVERRIDE_ADDRESS, CONTRACT_ABI, provider);
    const calldata = contract.interface.encodeFunctionData("inspect", [pools]);

    const tx = {
        to: STATE_OVERRIDE_ADDRESS,
        data: calldata
    }

    const params = [
        tx,
        "latest",
        Object.fromEntries(override)
    ]

    const callResult = await provider.send("eth_call", params)

    const v3LiquidityPools = (contract.interface.decodeFunctionResult("inspect", callResult)[0])
        .map((args: [string, string, string]) => {
            return new V3LiquidityPool(args[0], args[1], args[2])
        })

    return v3LiquidityPools;
}