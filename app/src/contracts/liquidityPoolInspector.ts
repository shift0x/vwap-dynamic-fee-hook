import { ethers } from "ethers";

const CONTRACT_ABI = `[{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"address[]","name":"pools","type":"address[]"}],"name":"inspect","outputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"bool","name":"result","type":"bool"}],"internalType":"struct LiquidityPoolInspector.InspectionResult[]","name":"inspectionResults","type":"tuple[]"}],"stateMutability":"view","type":"function"}]`;
const STATE_OVERRIDE_BYTECODE = `0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063713343ed14610030575b600080fd5b61004a600480360381019061004591906104ca565b610060565b6040516100579190610641565b60405180910390f35b6060815167ffffffffffffffff81111561007d5761007c610387565b5b6040519080825280602002602001820160405280156100b657816020015b6100a36102cd565b81526020019060019003908161009b5790505b50905060005b825181101561019c5760006100f4630dfe168160e01b8584815181106100e5576100e4610663565b5b602002602001015188886101a4565b8015610129575061012863d21220a760e01b85848151811061011957610118610663565b5b602002602001015188886101a4565b5b9050604051806040016040528085848151811061014957610148610663565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16815260200182151581525083838151811061018557610184610663565b5b6020026020010181905250508060010190506100bc565b509392505050565b60008060008573ffffffffffffffffffffffffffffffffffffffff16876040516020016101d191906106df565b6040516020818303038152906040526040516101ed919061076b565b600060405180830381855afa9150503d8060008114610228576040519150601f19603f3d011682016040523d82523d6000602084013e61022d565b606091505b509150915081610242576000925050506102c5565b60008180602001905181019061025891906107c0565b90508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806102bf57508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b93505050505b949350505050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061033e82610313565b9050919050565b61034e81610333565b811461035957600080fd5b50565b60008135905061036b81610345565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103bf82610376565b810181811067ffffffffffffffff821117156103de576103dd610387565b5b80604052505050565b60006103f16102ff565b90506103fd82826103b6565b919050565b600067ffffffffffffffff82111561041d5761041c610387565b5b602082029050602081019050919050565b600080fd5b600061044661044184610402565b6103e7565b905080838252602082019050602084028301858111156104695761046861042e565b5b835b81811015610492578061047e888261035c565b84526020840193505060208101905061046b565b5050509392505050565b600082601f8301126104b1576104b0610371565b5b81356104c1848260208601610433565b91505092915050565b6000806000606084860312156104e3576104e2610309565b5b60006104f18682870161035c565b93505060206105028682870161035c565b925050604084013567ffffffffffffffff8111156105235761052261030e565b5b61052f8682870161049c565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61056e81610333565b82525050565b60008115159050919050565b61058981610574565b82525050565b6040820160008201516105a56000850182610565565b5060208201516105b86020850182610580565b50505050565b60006105ca838361058f565b60408301905092915050565b6000602082019050919050565b60006105ee82610539565b6105f88185610544565b935061060383610555565b8060005b8381101561063457815161061b88826105be565b9750610626836105d6565b925050600181019050610607565b5085935050505092915050565b6000602082019050818103600083015261065b81846105e3565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6106d96106d482610692565b6106be565b82525050565b60006106eb82846106c8565b60048201915081905092915050565b600081519050919050565b600081905092915050565b60005b8381101561072e578082015181840152602081019050610713565b60008484015250505050565b6000610745826106fa565b61074f8185610705565b935061075f818560208601610710565b80840191505092915050565b6000610777828461073a565b915081905092915050565b600061078d82610313565b9050919050565b61079d81610782565b81146107a857600080fd5b50565b6000815190506107ba81610794565b92915050565b6000602082840312156107d6576107d5610309565b5b60006107e4848285016107ab565b9150509291505056fea2646970667358221220963593aee550bf560c6c63fda63fc14a6aa88c0d0a1925e365a3cc5c511d35eb64736f6c634300081b0033`;
const STATE_OVERRIDE_ADDRESS = `0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97`;

type InspectionResult = {
    address: string,
    result: boolean,
}

export async function discoverLiquidityPoolsWithTokens(
    provider: ethers.JsonRpcProvider, 
    tokenA: string, 
    tokenB: string, 
    pools: string[]
) : Promise<string[]> {
    const override: Map<string, any> = new Map();

    override.set(STATE_OVERRIDE_ADDRESS, {
        code: STATE_OVERRIDE_BYTECODE
    });

    const contract = new ethers.Contract(STATE_OVERRIDE_ADDRESS, CONTRACT_ABI, provider);
    const calldata = contract.interface.encodeFunctionData("inspect", [tokenA, tokenB, pools]);

    const tx = {
        to: STATE_OVERRIDE_ADDRESS,
        data: calldata
    }

    const params = [
        tx,
        "latest",
        Object.fromEntries(override)
    ]

    const callResult = await provider.send("eth_call", params)

    const decodedCallResults = (contract.interface.decodeFunctionResult("inspect", callResult)[0])
        .map((args: [string, boolean]) => {
            return {
                address: args[0],
                result: args[1]
            }
        })

    const matchingPools = (decodedCallResults as InspectionResult[])
        .filter(inspection => { return inspection.result })
        .map(inspection => { return inspection.address });

    return matchingPools;
}